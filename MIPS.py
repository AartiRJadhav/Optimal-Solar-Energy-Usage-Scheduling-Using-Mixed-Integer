from mip import Model, xsum, maximize, BINARY



### RUN 1 ###



# Number of appliances and timeslots (24 for each hour in the day)
num_appliances = 3
num_timeslots = 24

# Maximum available power that can be generated by available solar panels, when SolarFactor is 1
Pmax = 5000

# SolarFactor depending on time of the day, highest at midday
SolarFactor = [0.1, 0.3, 0.5, 0.7, 0.9, 1.2, 1.7, 1.8, 1.9, 1.4, 0.9, 0.8,
               0.8, 1.1, 1.4, 1.6, 1.7, 1.6, 1.5, 1.2, 0.9, 0.7, 0.5, 0.3]

# Minimum and maximum number of hours each appliance must run in total
MinDuration = [2, 3, 1]
MaxTotalDuration = [4, 5, 3]

# Creating model
model = Model()

# Decision variables: x[i][t] = 1 if appliance i is on at time t, 0 otherwise
x = [[model.add_var(var_type=BINARY) for t in range(num_timeslots)] for i in range(num_appliances)]

# Objective function: Maximize total electricity consumption during peak solar energy generation
model.objective = maximize(xsum(Pmax * SolarFactor[t] * x[i][t] for i in range(num_appliances) for t in range(num_timeslots)))

# Power consumption constraint
for t in range(num_timeslots):
    model += xsum(Pmax * x[i][t] for i in range(num_appliances)) <= Pmax * SolarFactor[t]

# Minimum duration constraint
for i in range(num_appliances):
    model += xsum(x[i][t] for t in range(num_timeslots)) >= MinDuration[i]

# Maximum total duration constraint
for i in range(num_appliances):
    model += xsum(x[i][t] for t in range(num_timeslots)) <= MaxTotalDuration[i]

# Optimize the model
model.optimize()

# Output results in a more readable format
if model.num_solutions:
    print("Optimal solution found!")
    for i in range(num_appliances):
        on_times = [t for t in range(num_timeslots) if x[i][t].x >= 0.99]  # Using a threshold to check if the appliance is on
        print(f"Appliance {i} is on during time slots: {on_times}")
else:
    print("No solution found.")



### RUN 2 ###



num_appliances = 4
num_timeslots = 24

Pmax = 5000

SolarFactor = [0.1, 0.3, 0.5, 0.7, 0.9, 1.2, 1.7, 1.8, 1.9, 1.4, 0.9, 0.8,
               0.8, 1.1, 1.4, 1.6, 1.7, 1.6, 1.5, 1.2, 0.9, 0.7, 0.5, 0.3]

MinDuration = [2, 3, 1, 4]
MaxTotalDuration = [4, 5, 3, 6]

model = Model()

x = [[model.add_var(var_type=BINARY) for t in range(num_timeslots)] for i in range(num_appliances)]

model.objective = maximize(xsum(Pmax * SolarFactor[t] * x[i][t] for i in range(num_appliances) for t in range(num_timeslots)))

for t in range(num_timeslots):
    model += xsum(Pmax * x[i][t] for i in range(num_appliances)) <= Pmax * SolarFactor[t]

for i in range(num_appliances):
    model += xsum(x[i][t] for t in range(num_timeslots)) >= MinDuration[i]

for i in range(num_appliances):
    model += xsum(x[i][t] for t in range(num_timeslots)) <= MaxTotalDuration[i]

model.optimize()

if model.num_solutions:
    print("Optimal solution found!")
    for i in range(num_appliances):
        on_times = [t for t in range(num_timeslots) if x[i][t].x >= 0.99]
        print(f"Appliance {i} is on during time slots: {on_times}")
else:
    print("No solution found.")



### RUN 3 ###



from mip import Model, xsum, maximize, BINARY

num_appliances = 4
num_timeslots = 24

Pmax = 5000

SolarFactor = [0.2, 0.3, 0.6, 0.8, 1.1, 1.4, 1.9, 2.0, 2.2, 1.6, 1.1, 0.9,
               0.9, 1.2, 1.6, 1.8, 1.9, 1.8, 1.6, 1.3, 1.0, 0.8, 0.6, 0.4]

MinDuration = [2, 3, 1, 4]
MaxTotalDuration = [4, 5, 3, 6]

model = Model()

x = [[model.add_var(var_type=BINARY) for t in range(num_timeslots)] for i in range(num_appliances)]

model.objective = maximize(xsum(Pmax * SolarFactor[t] * x[i][t] for i in range(num_appliances) for t in range(num_timeslots)))

for t in range(num_timeslots):
    model += xsum(Pmax * x[i][t] for i in range(num_appliances)) <= Pmax * SolarFactor[t]

for i in range(num_appliances):
    model += xsum(x[i][t] for t in range(num_timeslots)) >= MinDuration[i]

for i in range(num_appliances):
    model += xsum(x[i][t] for t in range(num_timeslots)) <= MaxTotalDuration[i]

model.optimize()

if model.num_solutions:
    print("Optimal solution found!")
    for i in range(num_appliances):
        on_times = [t for t in range(num_timeslots) if x[i][t].x >= 0.99]
        print(f"Appliance {i} is on during time slots: {on_times}")
else:
    print("No solution found.")



    